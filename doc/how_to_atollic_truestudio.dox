7.5 How to get started with Atollic TrueSTUDIO for STM32 {#HOWTO_TRUESTUDIO}
============================================================================

[atollic_truestudio]: https://atollic.com/truestudio/
[core_utils]:         http://gnuwin32.sourceforge.net/packages/coreutils.htm
[msys]:               http://www.mingw.org/wiki/MSYS
[unix_shell_utils]:   https://sourceforge.net/projects/unixshellutils/files/latest/download

[TOC]

1. Introduction {#TRUESTUDIO_INTRO}
===================================

Atollic TrueSTUDIO for STM32 is a free, cross-platform Integrated Development 
Environment (IDE) based on [Eclipse CDT](https://www.eclipse.org/cdt/) to 
develop and debug STM32 microcontroller applications. It includes a GNU GCC 
build toolchain for C and C++.

2. Download and Install {#TRUESTUDIO_INSTALL}
=============================================

[HERE][atollic_truestudio] is the download page. On the Windows platform, the 
default installation directory is here:

    c:\Program Files (x86)\Atollic\TrueSTUDIO for STM32 9.3.0

3. Important subdirectories {#TRUESTUDIO_DIRS}
==============================================

Go ahead and familiarize yourself with the files & folders in the installation
directory.

The GNU C and C++ command-line toolchain (e.g. `arm-atollic-eabi-gcc.exe`) is 
located here:

    ARMTools\bin

The Unix tools `make.exe` and `rm.exe` are located here:

    Tools

Links to the User Guide (well worth the read!) and other documentation are 
located here:

    Manuals\General

[STMCubeProgrammer](https://www.st.com/en/development-tools/stm32cubeprog.html)
(only the CLI version) is located here:

    Servers\STM32CubeProgrammer\bin\STM32_Programmer_CLI.exe

4. How to create a Makefile managed C project {#TRUESTUDIO_MAKE_PROJECT}
========================================================================

The projects in this library can be built on the command-line by using a 
Makefile script to manage the build process. There are a large number of files 
and include paths, preprocessor symbol definitions, compiler options, etc. and 
using a Makefile makes it easier to replicate and maintain the projects. It 
would be time consuming to add this build info by hand each time a new Atollic 
TrueSTUDIO project is created.

@tip_s
For a gentle introduction to `make` see @ref HOWTO_MAKEFILES.
@tip_e

Atollic TrueSTUDIO usually manages the build process for you, but it also allows 
the creation of a Makefile managed C project. TrueSTUDIO comes with a limited 
set of Unix tools that is insufficient for the Makefiles in this library. The 
TrueSTUDIO project must be configured to use a more complete set like 
[MSYS][msys] or [UnixShellUtils][unix_shell_utils] by setting the PATH 
environment variable.

For the rest of these instructions it is assumed that
[UnixShellUtils][unix_shell_utils] is used and extracted here:

    C:\UnixShellUtils

The following steps show how to create a new Makefile managed C project
for an existing project in the library. The following project will be used:

    boards\arm\stm32\piconomix_hero_board\examples\gpio

@tip_s
If the project already contains a TrueSTUDIO project, it can be deleted to 
follow along with the steps outlined below. Delete ".project", ".cproject" and
".settings".
@tip_e

4.1 Use wizard to create a new Makefile managed Embedded C project {#TRUESTUDIO_WIZARD}
---------------------------------------------------------------------------------------

@warn_s
If creating the TrueSTUDIO project in an existing directory make a backup first 
as the wizard will create new files from a template that will overwrite existing 
ones, specifically the Makefile.
@warn_e

Start the wizard by creating a new C project:

    File > New Alt + Shift + N > C Project

![](ats_new_c_project.png)

Specify the project type as "Makefile project > Embedded C Project". The only 
toolchain option is "Atollic ARM Tools". Specify the directory location where 
the new project must be created and give the project a name:

![](ats_new_makefile_c_project.png)

@warn_s
Use the same project name as used in the Makefile. Edit the Makefile and you 
will find:
@warn_e

    # (1a) Project name
    PROJECT = gpio

Select the STM32 Microcontroller. It is an "STM32L072RB" for the Hero Board:

![](ats_hardware_settings.png)

The software settings does not matter, because the Makefile generated by the 
wizard will be reverted back to the original one. Press "Next>":

![](ats_software_configuration.png)

Select the debug probe that will be used to program and debug:

![](ats_debugger_configuration.png)

Use the Debug configuration. More will be added later. Press "Finish":

![](ats_select_configuration.png)

4.2 Delete wizard generated files & folders and restore original Makefile {#TRUESTUDIO_DELETE_WIZARD_FILES}
-----------------------------------------------------------------------------------------------------------

This is the wizard generated file & folder structure:

    .cproject
    .project
    Makefile
    stm32_flash.ld
    +---.settings
    +---Debug
    +---Drivers
    |   +---CMSIS
    |   |   +---Device
    |   |   |   \---ST
    |   |   |       \---STM32L0xx
    |   |   |           \---Include
    |   |   \---Include
    |   \---STM32L0xx_HAL_Driver
    |       +---Inc
    |       \---Src
    \---src
            main.c
            startup_stm32l072xx.s
            system_stm32l0xx.c
            tiny_printf.c

You only need the ".cproject" and ".project" file and ".settings" folder. Close
Atollic TrueSTUDIO and delete the following:
- "Makefile" file (wizard generated Makefile script)
- "stm32_flash.ld" file (wizard generated linker script)
- "Debug" directory (default build directory)
- "Drivers" directory (STM32 definitions and driver support)
- "src" directory (startup code and minimal main)

Restore the original Makefile as well as the original "src" directory 
(containing "main.h" and "main.c") from the backup and restart the IDE.

4.3 Customize build behaviour for project Makefile {#TRUESTUDIO_CFG_BUILD_BEHAVIOUR}
------------------------------------------------------------------------------------

The GNU C and C++ command-line toolchain packaged with Atollic TrueSTUDIO uses
a non-standard prefix, but the Makefile can accomodate it by providing a 
variable override `CPREFIX=arm-atollic-eabi`. The Makefile also support 
different builds which can be specified, e.g. `build=debug` (this is also the 
default if unspecified).

Left-click on project name so that it is selected, then right-click to open 
context menu and select "Properties Alt+Enter":

![](ats_project_properties.png)

Select "C/C++ Build" and "Behavior" tab. Specify "Build" as 
`CPREFIX=arm-atollic-eabi build=debug all` and "Clean" as `build=debug clean`:

![](ats_build_behaviour.png)

4.4 Add UnixShellUtils to PATH environment variable {#TRUESTUDIO_CFG_PATH}
--------------------------------------------------------------------------

Select "C/C++ Build > Environment", edit the "PATH" variable and prefix the 
path to UnixShellUtils:

    C:\UnixShellUtils\bin

![](ats_path_variable.png)

4.5 Update project source paths {#TRUESTUDIO_PATHS_UPDATE}
----------------------------------------------------------

Select "C/C++ General > Paths and Symbols" and "Includes" tab. Delete 
directories added by wizard:

![](ats_paths_remove.png)

Add "cfg" directory (to all configurations and all languages):

![](ats_paths_add.png)


