6.1 STM32 quick start guide {#STM32_QUICK_START_GUIDE}
======================================================

[TOC]

1. Introduction {#STM32_QS_INTRO}
=================================

[stm32cubeide]:       https://www.st.com/en/development-tools/stm32cubeide.html
[python]:             https://www.python.org/downloads
[tera_term]:          http://en.sourceforge.jp/projects/ttssh2
[ftdi_ignore_ser]:    http://www.ftdichip.com/Support/Utilities/IgnoreSerialNo.zip
[ftdi_uninstaller]:   http://www.ftdichip.com/Support/Utilities/CDMUninstaller_v1.4.zip
[ftdi_vcp_driver]:    http://www.ftdichip.com/Drivers/VCP.htm
[gnu_arm_tools]:      http://gnu-arm.com
[unix_shell_utils]:   https://sourceforge.net/projects/unixshellutils/files/latest/download
[msys]:               http://www.mingw.org/wiki/MSYS
[srecord]:            http://srecord.sourceforge.net

This is a quick start guide for the person who wants to switch extensive STM32 
ARM-Cortex based microcontroller portfolio and learns by example. C programming 
experience is a prerequisite.

The following free software tools are needed:
- [STM32CubeIDE][stm32cubeide] : 
  a free cross-platform Integrated Development Environment (IDE) 
  based on [Eclipse CDT](https://www.eclipse.org/cdt/) to build and debug 
  STM32 microcontroller applications. It includes a GNU GCC build toolchain for 
  C and C++.

The following command line tools are optional, but recommended:
- [UnixShellUtils][unix_shell_utils] :
  a minimal collection of Unix shell utilities (make, sh, echo, rm, etc.) 
  curated from [MSYS][msys] and other utilities ([srecord]) to build projects 
  using Makefile scripts.
- [GNU Tools for Arm Embedded Processors][gnu_arm_tools] :
  A GNU GCC build toolchain for C and C++.

@tip_s
For a gentle introduction to Makefiles, see @ref HOWTO_MAKEFILES.
@tip_e

1.1 Reference documents {#STM32_QS_REF}
---------------------------------------

- [STM32L072RB Datasheet](https://www.st.com/resource/en/datasheet/stm32l072rb.pdf)
- [STM32L072RB Reference Manual](https://www.st.com/resource/en/reference_manual/dm00108281.pdf)
- [STM32L072RB Errata](https://www.st.com/resource/en/errata_sheet/dm00148855.pdf)
- [STM32L0 Series Cortex M0+ programming manual](https://www.st.com/resource/en/programming_manual/dm00104451.pdf)

The reference documents can also be found here for off-line viewing:

    px-lib/boards/arm/stm32/piconomix_hero_board/docs

2. Tutorials {#STM32_QS_TUTORIALS}
==================================

These tutorials demonstrate how to use a peripheral by offering a distilled 
example. The tutorials build on each other, so it is recommended to work through
them in the order presented.

|Tutorial                      |Description                                                                   |
|------------------------------|------------------------------------------------------------------------------|
|@ref STM32_TUT01_GPIO_PART_A  |How to configure and use general purpose I/O pins - part A                    |
|@ref STM32_TUT01_GPIO_PART_B  |How to configure and use general purpose I/O pins - part B                    |
|@ref STM32_TUT01_GPIO_PART_C  |How to configure and use general purpose I/O pins - part C                    |
|@ref STM32_TUT01_GPIO_PART_D  |How to configure and use general purpose I/O pins - part D                    |
|@ref STM32_TUT02_SYSCLK_INT   |How to use the SysClk peripheral to generate a periodic interrupt             |
|@ref STM32_TUT03_GPIO_EXT_INT |How to generate an external GPIO interrupt                                    |
|@ref STM32_TUT04_STOP_MODE    |How to wake up from STOP mode with an external interrupt                      |

@warn_s
The tutorials may need to be modified for your specific target board.
@warn_e

3. Examples {#STM32_QS_EXAMPLES}
================================

These examples show how **px-lib** can be used to achieve two embedded 
equivalents of the "hello world" program on a PC.

|Example                    |Description                                                       |
|---------------------------|------------------------------------------------------------------|
|@ref STM32_EX_FLASHING_LED |This example toggles the LED once a second                        |
|@ref STM32_EX_PRINTF       |Redirect stdout to UART and print strings stored in FLASH and SRAM|

@warn_s
The examples may need to be modified for your specific target board.
@warn_e

